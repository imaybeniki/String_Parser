




String_Database::String_Database(void) {
}

String_Database::~String_Database(void) {
}

void String_Database::add(std::string& myString) {
	for(int i=0;i<myStrings.size();i++){
		if(myString==myStrings[i].data){
			myStrings[i].useCount++;
			break;
		}
		myStrings.push_back(myString);

	}


}

int String_Database::getCount(std::string& myString) {
	for(int i=0;i<myStrings.size();i++){
		if(myString==myStrings[i].data){
			return myStrings[i].useCount;
		}
	}
	return 0;
}

void String_Database::clear() {
	myStrings.clear();
}

bool String_Database::load(DataStore* myDataStore) {
	if(myDataStore==0){
		return false;
	}
	myDataStore->load(myStrings);
	return true;


}

bool String_Database::save(DataStore* myDataStore) {

}
